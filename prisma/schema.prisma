// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Theme {
  id              Int         @id @default(autoincrement())
  backgroundImage String
  font            String      @db.VarChar(255)
  componentColor  String      @db.VarChar(7)
  stores          StoreInfo[]
  History         History[]
  Rating          Rating[]
  Store           Store[]
  Seller          Seller?     @relation(fields: [sellerUsername], references: [username])
  sellerUsername  String?     @db.VarChar(255)
}

//model Store & model Location

model Store {
  lat         Float  @db.Double
  lng         Float  @db.Double
  name        String @id @unique @db.VarChar(255)
  //radius Int? @db.TinyInt not sure if I'll keep this
  displayName String @unique @db.VarChar(255)
  description String @db.Text
  theme       Theme? @relation(fields: [themeId], references: [id])
  themeId     Int?
}

model StoreInfo {
  name        String    @id @unique @db.VarChar(255)
  displayName String    @unique @db.VarChar(255)
  description String    @db.Text
  rating      Float     @default(0) @db.Float
  theme       Theme?    @relation(fields: [themeId], references: [id])
  //Icon?
  created     DateTime  @default(now())
  items       Item[]
  Customer    Customer? @relation(fields: [customerId], references: [username])
  customerId  String?
  Seller      Seller?   @relation(fields: [sellerId], references: [username])
  sellerId    String?
  themeId     Int?
}

model Item {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  displayName String     @db.VarChar(255)
  rating      Float      @db.Float
  price       String     @db.VarChar(255)
  description String     @db.Text
  image       String? //@default later
  featured    Boolean    @default(false)
  popular     Boolean    @default(false)
  store       StoreInfo? @relation(fields: [storeName], references: [name])
  storeName   String?    @db.VarChar(255)
}

model History {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(255)
  displayName String    @unique @db.VarChar(255)
  rating      Float     @db.Float
  visited     DateTime  @db.DateTime()
  theme       Theme?    @relation(fields: [themeId], references: [id])
  entered     Boolean //did the person enter the geofence or just view it outside
  Customer    Customer? @relation(fields: [customerId], references: [username])
  customerId  String?
  themeId     Int?
}

model Rating {
  id Int @id @default(autoincrement())

  name        String    @db.VarChar(255)
  displayName String    @db.VarChar(255)
  rating      Float     @db.Float
  theme       Theme?    @relation(fields: [themeId], references: [id])
  Customer    Customer? @relation(fields: [customerId], references: [username])
  customerId  String?
  themeId     Int?
}

model Customer {
  id String @id @unique @default(uuid())

  username  String   @unique @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  icon      Bytes?

  dynamicStyling Boolean     @default(false)
  savedStores    StoreInfo[]
  history        History[]
  ratings        Rating[]
}

model Seller {
  id String @id @unique @default(uuid())

  username  String   @unique @db.VarChar(255)
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  icon      Bytes?
  themes    Theme[]

  createdStores StoreInfo[]
}
